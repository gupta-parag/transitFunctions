library(data.table)
library(stringr)
library(sf)
library(dplyr)
library(leaflet)
# specify the name of the zip folder
name_of_file <- "miami_transit.zip"
###################################### Route Type definition ################################
route_type_def <- data.frame(route_type = c(0:7, 11:12),
Defn = c(c("Tram, Streetcar, Light rail"),
c("Subway, Metro"),
"Rail", "Bus","Ferry", "Cable Tram", "Aerial Lift",
"Funicular", "Trolleybus", "Monorail"))
# 0 - Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.
# 1 - Subway, Metro. Any underground rail system within a metropolitan area.
# 2 - Rail. Used for intercity or long-distance travel.
# 3 - Bus. Used for short- and long-distance bus routes.
# 4 - Ferry. Used for short- and long-distance boat service.
# 5 - Cable tram. Used for street-level rail cars where the cable runs beneath the vehicle, e.g., cable car in San Francisco.
# 6 - Aerial lift, suspended cable car (e.g., gondola lift, aerial tramway). Cable transport where cabins, cars, gondolas or open chairs are suspended by means of one or more cables.
# 7 - Funicular. Any rail system designed for steep inclines.
# 11 - Trolleybus. Electric buses that draw power from overhead wires using poles.
# 12 - Monorail. Railway in which the track consists of a single rail or a beam
####################################################################################################
################################# UNZIPPIG THE FILES ################################
zip_feed <- str_c("C:\\Users\\gupta\\Dropbox\\transit\\GTFS_feed\\zip\\", name_of_file)
unzip_feed <- str_c("C:\\Users\\gupta\\Dropbox\\transit\\GTFS_feed\\unzip\\",
gsub(name_of_file, pattern = ".zip$", replacement = ""))
feed_path <- list.files(unzip_feed, full.names = T)
feed_file_names <- list.files(unzip_feed)
gtfs_feed <- lapply(feed_path, fread)
names(gtfs_feed) <- gsub(feed_file_names, pattern = ".txt$", replacement = "")
######################################################################################
####################### Getting the files in simple data frame ####################################
trips <- gtfs_feed[['trips']]
trips_f <- trips[,c("route_id","service_id",
"trip_id", "shape_id")]
calendar <- gtfs_feed[['calendar']]
cal_f <- calendar[ , c(1:8)] # getting serice ID and all 7 days in week - Monday to Sunday
routes <- gtfs_feed[['routes']]
routes_f <- routes[,c("route_id","route_short_name",
"route_type","route_color")]
stops <- gtfs_feed[['stops']]
stops_f <- stops[,c("stop_id","stop_code","stop_lat","stop_lon" )]
stopTimes <- gtfs_feed[['stop_times']]
stopTimes_f <- stopTimes[ , c("trip_id", "arrival_time", "departure_time",
"stop_id", "stop_sequence", "shape_dist_traveled")]
shapes <- gtfs_feed[['shapes']]
tripsStops <- left_join(trips,stopTimes_f, by = "trip_id")
View(stopTimes_f)
View(trips_f)
############################## Stops frequency ###################
stopsTrips <- left_join(stopTimes_f, trips_f[,c(1:3)], by = "trip_id")
View(stopsTrips)
View(cal_f)
############################## Stops frequency ###################
stopsTripsCal <- left_join(stopTimes_f,
trips_f[,c(1:3)],
by = "trip_id") %>%
left_join(cal_f,by = "service_id")
View(stopsTripsCal)
library(lubridate)
x <-   hms(stopsTripsCal$arrival_time)
#classifying them into peak perioods
x <- NULL
x <- tibble(S_No = 1:nrow(stopsTripsCal))
View(x)
x$aTime <-   hms(stopsTripsCal$arrival_time)
View(x)
x$aHour <- hour(x$aTime)
View(stopsTripsCal)
View(stopsTripsCal[179468,])
max(x$aHour)
min(x$aHour)
monday <- stopsTripsCal[stopsTripsCal$monday == 1, ]
View(monday)
View(monday)
monday$aTime <- hms(monday$arrival_time)
monday$aHour <- hour(monday$aTime)
stopsTripsCal <- left_join(stopTimes_f,
trips_f[,c(1:3)],
by = "trip_id") %>%
left_join(cal_f,by = "service_id")
monday <- stopsTripsCal[stopsTripsCal$monday == 1, ]
monday$aTime <- hms(monday$arrival_time)
monday$aHour <- hour(monday$aTime)
stopTrips <- monday %>% group_by(stop_id) %>%
summarise(total_trips = n())
View(stopTrips)
View(stops_f)
stopTrips <- monday %>% group_by(stop_id) %>%
summarise(total_trips = n()) %>%
left_join(stops_f, by = "stop_id")
View(stopTrips)
stopFreq <- monday %>% group_by(stop_id) %>%
summarise(total_trips = n()) %>%
left_join(stops_f, by = "stop_id")
rm(list = ls())
gc()
library(data.table)
library(stringr)
library(sf)
library(dplyr)
library(leaflet)
library(lubridate)
# specify the name of the zip folder
name_of_file <- "miami_transit.zip"
###################################### Route Type definition ################################
route_type_def <- data.frame(route_type = c(0:7, 11:12),
Defn = c(c("Tram, Streetcar, Light rail"),
c("Subway, Metro"),
"Rail", "Bus","Ferry", "Cable Tram", "Aerial Lift",
"Funicular", "Trolleybus", "Monorail"))
# 0 - Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.
# 1 - Subway, Metro. Any underground rail system within a metropolitan area.
# 2 - Rail. Used for intercity or long-distance travel.
# 3 - Bus. Used for short- and long-distance bus routes.
# 4 - Ferry. Used for short- and long-distance boat service.
# 5 - Cable tram. Used for street-level rail cars where the cable runs beneath the vehicle, e.g., cable car in San Francisco.
# 6 - Aerial lift, suspended cable car (e.g., gondola lift, aerial tramway). Cable transport where cabins, cars, gondolas or open chairs are suspended by means of one or more cables.
# 7 - Funicular. Any rail system designed for steep inclines.
# 11 - Trolleybus. Electric buses that draw power from overhead wires using poles.
# 12 - Monorail. Railway in which the track consists of a single rail or a beam
####################################################################################################
################################# UNZIPPIG THE FILES ################################
zip_feed <- str_c("C:\\Users\\gupta\\Dropbox\\transit\\GTFS_feed\\zip\\", name_of_file)
unzip_feed <- str_c("C:\\Users\\gupta\\Dropbox\\transit\\GTFS_feed\\unzip\\",
gsub(name_of_file, pattern = ".zip$", replacement = ""))
# unzip_feed <- "/Users/parag.geminigmail.com/Dropbox/transit/GTFS_feed/unzip/miami_transit"
#
# #unziping the file to the directory
# unzip(zipfile = zip_feed, exdir = unzip_feed)
#####################################################################################
##################### Reading GTFS feed files ################################
feed_path <- list.files(unzip_feed, full.names = T)
feed_file_names <- list.files(unzip_feed)
gtfs_feed <- lapply(feed_path, fread)
names(gtfs_feed) <- gsub(feed_file_names, pattern = ".txt$", replacement = "")
######################################################################################
####################### Getting the files in simple data frame ####################################
trips <- gtfs_feed[['trips']]
trips_f <- trips[,c("route_id","service_id",
"trip_id", "shape_id")]
calendar <- gtfs_feed[['calendar']]
cal_f <- calendar[ , c(1:8)] # getting serice ID and all 7 days in week - Monday to Sunday
routes <- gtfs_feed[['routes']]
routes_f <- routes[,c("route_id","route_short_name",
"route_type","route_color")]
stops <- gtfs_feed[['stops']]
stops_f <- stops[,c("stop_id","stop_code","stop_lat","stop_lon" )]
stopTimes <- gtfs_feed[['stop_times']]
stopTimes_f <- stopTimes[ , c("trip_id", "arrival_time", "departure_time",
"stop_id", "stop_sequence", "shape_dist_traveled")]
shapes <- gtfs_feed[['shapes']]
##########################################################################################
############################## Stops frequency ###################
#getting stop times, with tripID, routeID and calendar
stopsTripsCal <- left_join(stopTimes_f,
trips_f[,c(1:3)],
by = "trip_id") %>%
left_join(cal_f,by = "service_id")
monday <- stopsTripsCal[stopsTripsCal$monday == 1, ]
monday$aTime <- hms(monday$arrival_time)
monday$aHour <- hour(monday$aTime)
stopFreq <- monday %>% group_by(stop_id) %>%
summarise(total_trips = n()) %>%
left_join(stops_f, by = "stop_id")
View(stopFreq)
leaflet() %>% addTiles() %>%
addCircleMarkers(data = stopFreq, lat = stopFreq$stop_lat,
lng = stopFreq$stop_lon)
4^1/2
1757^1/2
leaflet() %>% addTiles() %>%
addCircleMarkers(data = stopFreq, lat = stopFreq$stop_lat,
lng = stopFreq$stop_lon,
radius = sqrt(stopFreq$total_trips)/2)
leaflet() %>% addTiles() %>%
addCircleMarkers(data = stopFreq, lat = stopFreq$stop_lat,
lng = stopFreq$stop_lon, weight = 2,
radius = sqrt(stopFreq$total_trips)/2)
leaflet() %>% addTiles() %>%
addCircleMarkers(data = stopFreq, lat = stopFreq$stop_lat,
lng = stopFreq$stop_lon, weight = 2,
label = stopFreq$stop_code,
radius = sqrt(stopFreq$total_trips)/2)
leaflet() %>% addTiles() %>%
addCircleMarkers(data = stopFreq, lat = stopFreq$stop_lat,
lng = stopFreq$stop_lon, weight = 2,
label = stopFreq$stop_code,fillOpacity = 0,
radius = sqrt(stopFreq$total_trips)/2)
leaflet() %>% addTiles() %>%
addCircleMarkers(data = stopFreq, lat = stopFreq$stop_lat,
lng = stopFreq$stop_lon, weight = 2,
label = stopFreq$stop_code,
color = NULL,
radius = sqrt(stopFreq$total_trips)/2)
leaflet() %>% addTiles() %>%
addCircleMarkers(data = stopFreq, lat = stopFreq$stop_lat,
lng = stopFreq$stop_lon, weight = 2,
label = stopFreq$stop_code,
color = NULL,
radius = sqrt(stopFreq$total_trips))
leaflet() %>% addTiles() %>%
addCircleMarkers(data = stopFreq, lat = stopFreq$stop_lat,
lng = stopFreq$stop_lon, weight = 2,
label = stopFreq$stop_code,
fillColor = NULL,
radius = sqrt(stopFreq$total_trips))
leaflet() %>% addTiles() %>%
addCircleMarkers(data = stopFreq, lat = stopFreq$stop_lat,
lng = stopFreq$stop_lon, weight = 2,
label = stopFreq$stop_code,
color = NULL,
radius = sqrt(stopFreq$total_trips))
View(stops)
library(htmlwidgets)
library(htmltools)
source("E:\\Z\\transit_Functions\\scripts\\shapesRoutes.R")
